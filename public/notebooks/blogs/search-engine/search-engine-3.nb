{
  "cells": [
    {
      "cell_type": "markdown",
      "source": "<p>Search engines are ubiquitous. Google, Bing, Yahoo, you name it, all of these are internet-wide search engines. Even your favorite social media platforms have a search functionality. How do they work? How can we build our own? And how can we build a search engine which is cheap and easy to run?</p>\n<p>In this part of the search engine series, we will index our corpus and implement a rudimentary search on our index.</p>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h1>Reverse Index and Search Data Structures</h1>\n<p>Search engines are ubiquitous. Google, Bing, Yahoo, you name it, all of these are internet-wide search engines. Even your favorite social media platforms have a search functionality. How do they work? How can we build our own? And how can we build a search engine which is cheap and easy to run?</p>\n<p>In this part of the search engine series, we will index our corpus and implement a rudimentary search on our index.</p>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Chapters üìö</h2>\n<ol>\n<li><a href=\"/blog/search-engine\">Introduction to the Search Problem</a></li>\n<li><a href=\"/blog/search-engine-2\">Data acquisition, normalization and cleaning</a></li>\n<li><a href=\"/blog/search-engine-3\"><strong>Reverse Index and Search</strong></a></li>\n<li><a href=\"/blog/search-engine-4\">Workshop - Build a Search Engine</a></li>\n<li><a href=\"/blog/search-engine-5\">Workshop - Build a Search Engine (solution)</a></li>\n<li><a href=\"/blog/search-engine-6\">Token-frequency optimization and Zipf‚Äôs law</a></li>\n</ol>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Where we left off üîÑ</h2>\n<p>In the <a href=\"/blog/search-engine-1\">previous page</a>, we implemented data acquisition and data cleanup. We are now able to:</p>\n<ol>\n<li>Find files in the directory of Enron emails</li>\n<li>Clean up the text</li>\n<li>Tokenize the text into lists of tokens</li>\n</ol>\n<p>Our goal in this article is to take these token lists and devise a method to search through them.</p>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Indices üóÇÔ∏è</h2>\n<p>In the first part of this series, <a href=\"/blog/search-engine\">Introduction to the Search Problem</a>, we learned how to use an index in a book to find a topic. Can we use the same methods to search our <strong>corpus</strong>?</p>\n<blockquote>\n<p>ü§î <em>Think to yourself</em>, how do you find a topic in a textbook?</p>\n</blockquote>\n<blockquote>\n<p>üìö <strong>Corpus</strong>: In search, a corpus is simply the collection of text documents that a search engine indexes and retrieves results</p>\n</blockquote>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Building an Index üìá</h2>\n<p>While writing a textbook, the authors and editors have full knowledge of the content they are writing. They have the ability to demarcate the important topics and terms, and build an index on the terms and concepts <em>they</em> think would be most useful to their readers. And this is more than enough for books! However if you are building Google, and have the lofty goal of indexing the whole internet you don‚Äôt have the money, time, or capability to have a human read through every single website and article to extract the most important topics to build an index. Thus, the science behind building a search engine is about building an algorithm which can decide what to index and then efficiently build an index.</p>\n<p><em>So, how can we build an index algorithmically?</em></p>\n<p>The index in a textbook maps each entry to the pages which contain it. Example index entry:</p>\n<pre><code>A  \nAntibiotics, 65-68  \nArchaea, 15, 22-24  \nAutotrophic bacteria, 30  \n\nD  \nDNA replication in prokaryotes, 32-34\n\nH  \nHorizontal gene transfer, 38-42  \n\nM  \nMicrobiome, 60-63  \nMitochondria (Endosymbiotic Theory), 70\n\nP  \nPathogenic bacteria, 55-58  \nPlasmids, 36  \nProkaryotic ribosomes, 21  \n\nR  \nRibosomes, 21  \nRespiration in prokaryotes, 44  \n\nV  \nViruses vs. Bacteria, 75-78  \n</code></pre>\n<p>Notice how our index has the following entries: <em>DNA replication in prokaryotes</em>, <em>Prokaryotic ribosimes</em>, <em>Respiration in Prokaryotes</em>. Each entry in the index contains a list of pages where to look to read more.</p>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2>‚ÄúIndex‚Äù, ‚ÄúForward Index‚Äù, ‚ÄúReverse Index‚Äù, ‚ÄúInverted Index‚Äù üìë</h2>\n<p>In most search engines, we can refer to the data stored in two different mappings - the ‚Äúforward index‚Äù and ‚Äúreverse index‚Äù (also known as an inverted index, or index). Let‚Äôs create an example:</p>\n<p>Documents:</p>\n<pre><code>1Ô∏è‚É£ The cat sits on the mat.\n2Ô∏è‚É£ The dog sleeps on the mat.\n3Ô∏è‚É£ The cat and dog play together.\n4Ô∏è‚É£ The quick brown fox jumps over the lazy dog\n</code></pre>\n<p>A forward index contains the list of tokens in each document. Forward Index:</p>\n<pre><code>1Ô∏è‚É£ { The, cat, sits, on, the, mat }\n2Ô∏è‚É£ { The, dog, sleeps, on, the, mat }\n3Ô∏è‚É£ { The, cat, and, dog, play, together }\n4Ô∏è‚É£ { The, quick, brown, fox, jumps, over, the, lazy, dog }\n</code></pre>\n<p>The reverse index contains the list of documents which contain each token. Reverse index:</p>\n<pre><code>the: 1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£4Ô∏è‚É£\ncat: 1Ô∏è‚É£3Ô∏è‚É£\nsits: 1Ô∏è‚É£\non: 1Ô∏è‚É£2Ô∏è‚É£\nmat: 1Ô∏è‚É£2Ô∏è‚É£\ndog: 2Ô∏è‚É£3Ô∏è‚É£4Ô∏è‚É£\nsleeps: 2Ô∏è‚É£\nand: 3Ô∏è‚É£\nplay: 3Ô∏è‚É£\ntogether: 3Ô∏è‚É£\nquick: 4Ô∏è‚É£\nbrown: 4Ô∏è‚É£\nfox: 4Ô∏è‚É£\nover: 4Ô∏è‚É£\nlazy: 4Ô∏è‚É£\n</code></pre>\n<p>If we want to search ‚Äúdog cat play‚Äù, we can look up in the index:</p>\n<pre><code>dog: 2Ô∏è‚É£3Ô∏è‚É£4Ô∏è‚É£\ncat: 1Ô∏è‚É£3Ô∏è‚É£\nplay: 3Ô∏è‚É£\n</code></pre>\n<p>And let‚Äôs simply rank the documents on which was found most:</p>\n<pre><code>3Ô∏è‚É£: 3 hits\n2Ô∏è‚É£: 1 hit\n1Ô∏è‚É£: 1 hit\n4Ô∏è‚É£: 1 hit\n</code></pre>\n<p>Thus, the best result for our query is document 3Ô∏è‚É£.</p>\n<blockquote>\n<p><strong>Forward Index</strong>: a data structure which maps each document to tokens it contains.</p>\n</blockquote>\n<blockquote>\n<p><strong>Reverse index</strong>, also known as <strong>Inverted Index</strong> and <strong>Index</strong>: a data structure, which is similar to a hash table, but reverse. In search engines, we can use a reverse index to map a token to the documents it appears in</p>\n</blockquote>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Implementing a Reverse Index üîñ</h2>\n<p>Let‚Äôs attempt to code this!</p>\n<pre><code class=\"language-javascript\">class Indexer {\n  constructor() {\n    this.idx = new Map();\n  }\n\n  index(text, uri) {\n    // Build a forward index from the document\n    const tokens = new Set();\n    tokenize(preprocess(text)).forEach(wordSet.add);\n\n    // Update the reverse index with all of our tokens\n    for (const token of tokens) {\n      if (!this.idx.has(token)) {\n        this.idx.set(token, []);\n      }\n\n      this.idx.get(token).push(uri);\n    }\n  }\n}\n</code></pre>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Indexing our Corpus (Enron emails dataset) üìö</h2>\n<p>Now that we know how to index our corpus and have built our <code>index(document)</code> function, we just need to feed in documents to build an index.</p>\n<pre><code class=\"language-javascript\">const indexer = new Indexer();\n\n// ...\n\nfor await (const [ filepath, contents ] of readFilesRecursively(dirPath)) {\n  try {\n    indexer.index(contents, filepath);\n  } catch (e) {\n    console.log(filepath, contents);\n    console.error(e);\n  }\n}\n</code></pre>\n<p>I ran this function and indexed the entire Enron emails dataset.</p>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Analyzing the Index üßê</h2>\n<p>To analyze the index, I created a debug functionality to dump the index to a JSON file which can be readily read in a text editor. However, I noticed an immediate issue: the size of the index. The index was so large that I could not write it to a JSON file.</p>\n<p>Thus, I modified my driver code to limit the index to 1000 files. This left me with a palatable 8 MB JSON which I grokked through. Immediately, I found some glaring issues:</p>\n<ol>\n<li>Numbers were not getting preserved properly. The <code>preprocess(str)</code> function was incorrectly treating numbers like emojis and adding spaces around them.</li>\n<li>Lots of low quality entries due to special characters in weird places</li>\n</ol>\n<p>A random probe of the index led to this chunk. Almost all ‚Äúterms‚Äù are containing some sort of garbage (punctuation, symbols, etc.):</p>\n<pre><code>&quot;mobile:&quot;, &quot;sure,&quot;, &quot;of.&quot;, &quot;-ina&quot;, &quot;curless,&quot;, &quot;amanda&quot;, &quot;ina,&quot;, &quot;reception.&quot;, &quot;mandy&quot;, &quot;form.doc&quot;, &quot;filled&quot;, &quot;pleae&quot;, &quot;announcements.enron@enron.com&quot;, &quot;dl-ga-all_domestic@enron.com&quot;, &quot;&lt;/o=enron/ou=na/cn=recipients/cn=mbx_anncenron&gt;&quot;, &quot;dl-ga-all_domestic&quot;, &quot;&lt;/o=enron/ou=na/cn=recipients/cn=dl-ga-all_enron_north_america&gt;&quot;, &quot;around,&quot;, &quot;credible&quot;, &quot;advocate&quot;, &quot;print&quot;, &quot;reporters.&quot;, &quot;links&quot;, &quot;stories&quot;, &quot;interviews.&quot;, &quot;times:&quot;, &quot;suits&quot;, &quot;http://home.enron.com/updates/articles/lawsuits.html&quot;, &quot;ap&quot;, &quot;online:&quot;, &quot;rebirth&quot;, &quot;http://home.enron.com/updates/articles/notimpossible.html&quot;, &quot;wire:&quot;, &quot;salvaged:&quot;, &quot;collapsed&quot;, &quot;faces&quot;, &quot;hurdles&quot;, &quot;http://home.enron.com/updates/articles/salvaged.html&quot;\n</code></pre>\n<p>Thus, before continuing, I decided to improve the preprocessing steps a bit.</p>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Improving our Preprocessing üìà</h2>\n<p>Let‚Äôs make some changes:</p>\n<ol>\n<li>Lets NFKC normalization before NFD to further clean up unicode</li>\n<li>Lets replace <code>\\p{Emoji}</code> with <code>\\p{Emoji_Presentation}|\\p{Extended_Pictographic}</code> since that was treating numbers as emojis.</li>\n<li>Lets use a regex to replace special characters with spaces</li>\n</ol>\n<blockquote>\n<p><strong>NFKC</strong>:</p>\n<p>Normalization Form KC - Compatibility decomposition followed by canonical composition</p>\n<p>Read <a href=\"https://unicode.org/reports/tr15/\">this article</a> for more information</p>\n</blockquote>\n<blockquote>\n<p><strong>NFD</strong>:</p>\n<p>Normalization Form D - Canonical decomposition</p>\n<p>Read <a href=\"https://unicode.org/reports/tr15/\">this article</a> for more information</p>\n</blockquote>\n<p><strong>Try the new preprocessing algorithm below</strong>:</p>\n"
    },
    {
      "cell_type": "raw",
      "source": "(() => {\n    return {\n        tool: 'code',\n        props: {\n            defaultSource: `const input = '<r√©sum√©> #1 !+------ ƒ∞STANBUL Ô¨Åanc√©e ùüôùüöùüõ ¬Ω ¬æ ¬º üë©‚ÄçüöÄüèæüè≥Ô∏è‚Äçüåàüö¥üèΩ‚Äç‚ôÇÔ∏è‚úåüèø search2023update multi-word‚Äîhyphenated excessive spaces FULLWIDTHÔº¥Ôº•Ôº∏Ôº¥ ùíûùíΩùëíùìÇùíæùí∏ùí∂ùìÅ ŸÖŸéÿ±Ÿíÿ≠Ÿéÿ®Ÿãÿß ‰∏≠ÊñáÊµãËØï üíñ‚ú®Unicode‚ú®üíñ Helloüë©‚ÄçüíªWorld 2023Âπ¥ÊúÄÊñ∞ÊÉÖÂ†± ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ œÄœÅŒøŒ≥œÅŒ±ŒºŒºŒ±œÑŒπœÉŒºœåœÇ –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ ‡§ó‡§£‡§®‡§æ123‡§∂‡§¨‡•ç‡§¶ ';\n\nconsole.log(input);\nconsole.log(transliterate(input));\n\nfunction transliterate(string) {\n  return string\n    .normalize('NFKC')                       // Normalization form, compatibility decomposition followed by canonical composition\n    .normalize('NFD')                        // Normalization form, canonical decomposition\n    .replace(/(\\\\p{M}|\\\\p{Emoji_Modifier}|\\\\p{P}\\\\p{Sc}\\\\p{Join_Control})/gu, '')  // Remove: marks / diacritics, emoji modifiers, punctuation\n    .replace(/(\\\\p{Emoji_Presentation}|\\\\p{Extended_Pictographic})/gu, ' $1 ')  // put spaces around emojis so we treat them as words\n    .replace(/\\\\p{White_Space}/gu, ' ')       // transform whitespace to spaces\n    .replace(/(\\\\p{Ll})(\\\\p{Lu})/gu, '$1 $2')  // split camelCase\n    .replace(/(\\\\p{N})(\\\\p{L})/gu, '$1 $2')    // split number followed by word without space\n    .replace(/(\\\\p{L})(\\\\p{N})/gu, '$1 $2')    // split word followed by number without space\n    // Replace special characters with spaces\n    .replace(/(\\\\.|\\\\\\\\|\\\\+|\\\\*|\\\\?|\\\\[|\\\\]|\\\\^|\\\\$|\\\\(|\\\\)|\\\\{|\\\\}|\\\\=|\\\\!|\\\\<|\\\\>|\\\\||\\\\:|\\\\-|\\\\/|,|_|#|\\`|'|\"|~|@|%|&)/g, ' ')\n    .replace(/\\\\s+/gu, ' ')                   // remove extra whitespace between\n    .toLowerCase();                          // make all text lowercase\n}\n`,\n            autorun: true,\n            header: false,\n        }\n    }\n})()"
    },
    {
      "cell_type": "markdown",
      "source": "<p>Looks good, eh?</p>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Searching Using a Reverse Index üïµÔ∏è‚Äç‚ôÄÔ∏è</h2>\n<p>Building the reverse index is the hard part. Turns out that searching with a reverse index is easy and very efficient.</p>\n<p>The time complexity of the search operation, where <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"position: relative;\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.817ex\" height=\"1.441ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -626 361 637\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>t</mi></math></mjx-assistive-mml></mjx-container> is the numebr of tokens in the search string:</p>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" style=\"position: relative;\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.303ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 1902 1000\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(763,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1152,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1513,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"block\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></math></mjx-assistive-mml></mjx-container><p>And the space complexity of the search operation, where <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"position: relative;\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.817ex\" height=\"1.441ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -626 361 637\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>t</mi></math></mjx-assistive-mml></mjx-container> is the number of tokens, and <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"position: relative;\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.176ex\" height=\"1.593ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 520 704\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>d</mi></math></mjx-assistive-mml></mjx-container> is the average number of documents mapped to a token:</p>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" style=\"position: relative;\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.245ex\" height=\"2.704ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -945 3644.4 1195\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(763,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1152,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1735.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(2735.4,0)\"><g data-mml-node=\"mover\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(427,255) translate(-250 0)\"><path data-c=\"AF\" d=\"M69 544V590H430V544H69Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(3255.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"block\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo>√ó</mo><mrow data-mjx-texclass=\"ORD\"><mover><mi>d</mi><mo stretchy=\"false\">¬Ø</mo></mover></mrow><mo stretchy=\"false\">)</mo></math></mjx-assistive-mml></mjx-container><p><strong>Pseudocode Steps</strong> to search using a reverse index:</p>\n<ol>\n<li>Normalize the search query to the reverse index. This is fancy speak for use the exact same methods to process the search query as the contents of the reverse index.</li>\n<li>Create a hash map to map each document found to the number times it was found.</li>\n<li>Add a document to the hash map if it is a hit and increment its hit count (score)</li>\n<li>Rank the documents based on these scores</li>\n</ol>\n<p>Implemented,</p>\n<pre><code class=\"language-javascript\">query(searchQuery) {\n  if (!searchQuery)\n    return [];\n\n  // List of tokens in the search query\n  const tokens = new Set(tokenize(preprocess(searchQuery)));\n\n  // Forward index we will build by reversing the reverse index\n  const unrankedResults = new Map();\n  for (const token of tokens) {\n    // Get all documents associated with a token\n    const hits = idx.get(term) || [];\n\n    // Add each document to the unrankedResults map and/or increment their value (+1 for each time a document is found)\n    for (const hit of hits) {\n      const current = unrankedResults.get(hit) || 0;\n      unrankedResults.set(hit, current + 1);\n    }\n  }\n\n  return Array\n    .from(unrankedResults.entries())\n    .sort((a, b) =&gt; b[1] - a[1])\n}\n</code></pre>\n<p><strong>Try the Demo Below</strong>: it implements searching with a prebuilt reverse index of 5 documents.</p>\n"
    },
    {
      "cell_type": "raw",
      "source": "(() => {\n    return {\n        tool: 'code',\n        props: {\n            defaultSource: `let idx;\n\nfunction normalize(string) {\n  return string\n    .normalize('NFKC')                       // Normalization form, compatibility decomposition followed by canonical composition\n    .normalize('NFD')                        // Normalization form, canonical decomposition\n    .replace(/(\\\\p{M}|\\\\p{Emoji_Modifier}|\\\\p{P}\\\\p{Sc}\\\\p{Join_Control})/gu, '')  // Remove: marks / diacritics, emoji modifiers, punctuation\n    .replace(/(\\\\p{Emoji_Presentation}|\\\\p{Extended_Pictographic})/gu, ' $1 ')  // put spaces around emojis so we treat them as words\n    .replace(/\\\\p{White_Space}/gu, ' ')       // transform whitespace to spaces\n    .replace(/(\\\\p{Ll})(\\\\p{Lu})/gu, '$1 $2')  // split camelCase\n    .replace(/(\\\\p{N})(\\\\p{L})/gu, '$1 $2')    // split number followed by word without space\n    .replace(/(\\\\p{L})(\\\\p{N})/gu, '$1 $2')    // split word followed by number without space\n    // Replace special characters with spaces\n    .replace(/(\\\\.|\\\\\\\\|\\\\+|\\\\*|\\\\?|\\\\[|\\\\]|\\\\^|\\\\$|\\\\(|\\\\)|\\\\{|\\\\}|\\\\=|\\\\!|\\\\<|\\\\>|\\\\||\\\\:|\\\\-|\\\\/|,|_|#|\\`|'|\"|~|@|%|&)/g, ' ')\n    .replace(/\\\\s+/gu, ' ')                   // remove extra whitespace between\n    .toLowerCase();                          // make all text lowercase\n}\n\nfunction tokenize(string) {\n  return string\n    .split(' ')\n    .filter(str => str && str.length > 0);\n}\n\nfunction query(searchQuery) {\n  if (!searchQuery)\n    return [];\n\n  const terms = new Set(tokenize(normalize(searchQuery)));\n\n  const unrankedResults = new Map();\n  for (const term of terms) {\n    const hits = idx[term] || [];\n    for (const hit of hits) {\n      const current = unrankedResults.get(hit) || 0;\n      unrankedResults.set(hit, current + 1);\n    }\n  }\n\n  return Array\n    .from(unrankedResults.entries())\n    .sort((a, b) => b[1] - a[1]);\n}\n\nfunction log(query, output) {\n  console.log('Query: ', query, ' results: ', output.length);\n  for (const out of output) {\n    console.log('Hits: ', out[1], ' document: ', out[0]);\n  }\n  console.log(' ');\n}\n\nfunction doSearch(q) {\n  log(q, query(q));\n}\n\n(async () => {\n  // context switch since we need to ensure the index loaded (it's appended at the end of this code)\n  await new Promise(r => setTimeout(r, 1));\n\n  doSearch('hello');\n  doSearch('message');\n  doSearch('hello message');\n})();\n\nidx = {\"message\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"id\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"1075855378110\": [\"enron-emails/allen-p/_sent_mail/1.\"], \"java\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"mail\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"evans\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"thyme\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"date\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"mon\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/1000.\"], \"may\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\"], \"00\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"0700\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"pdt\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"from\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"phillip\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"allen\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"enron\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"com\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"to\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"tim\": [\"enron-emails/allen-p/_sent_mail/1.\"], \"belden\": [\"enron-emails/allen-p/_sent_mail/1.\"], \"subject\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"mime\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"version\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"content\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"type\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"text\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"plain;\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"charset\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"us\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"ascii\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"transfer\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"encoding\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"bit\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"x\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"k\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"xgate\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\"], \"cc\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"bcc\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"folder\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"jan\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\"], \"sent\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"origin\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"p\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"file\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"name\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"pallen\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"non\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\"], \"privileged\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\"], \"pst\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\"], \"here\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\"], \"is\": [\"enron-emails/allen-p/_sent_mail/1.\", \"enron-emails/allen-p/_sent_mail/10.\"], \"our\": [\"enron-emails/allen-p/_sent_mail/1.\"], \"forecast\": [\"enron-emails/allen-p/_sent_mail/1.\"], \"1075855378456\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"fri\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"john\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"lavorato\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"re\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"j\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"traveling\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"have\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"a\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/1000.\"], \"business\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"meeting\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"takes\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"the\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/1000.\"], \"fun\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"out\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"of\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/1000.\"], \"trip\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"especially\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"if\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"you\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/1000.\"], \"prepare\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"presentation\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"i\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"would\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"suggest\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"holding\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"plan\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"meetings\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"then\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"take\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"without\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"any\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/1000.\"], \"formal\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"even\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"try\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"and\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/1000.\"], \"get\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"some\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"honest\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"opinions\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"on\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/1000.\"], \"whether\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"desired\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"or\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"necessary\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"as\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"far\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"think\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"it\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"be\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/1000.\"], \"more\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"productive\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"stimulate\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"discussions\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"across\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"different\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"groups\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"about\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"what\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"working\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"not\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"too\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"often\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"presenter\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"speaks\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"others\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"are\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"quiet\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"just\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"waiting\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"for\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"their\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"turn\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"might\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"better\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"held\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"in\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/1000.\"], \"round\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"table\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"discussion\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"format\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"my\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"suggestion\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"where\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"go\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/100.\"], \"austin\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"play\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"golf\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"rent\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"ski\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"boat\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"jet\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"s\": [\"enron-emails/allen-p/_sent_mail/10.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"flying\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"somewhere\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"much\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"time\": [\"enron-emails/allen-p/_sent_mail/10.\"], \"1075855687451\": [\"enron-emails/allen-p/_sent_mail/100.\"], \"wed\": [\"enron-emails/allen-p/_sent_mail/100.\"], \"oct\": [\"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\"], \"03\": [\"enron-emails/allen-p/_sent_mail/100.\"], \"leah\": [\"enron-emails/allen-p/_sent_mail/100.\"], \"arsdall\": [\"enron-emails/allen-p/_sent_mail/100.\"], \"test\": [\"enron-emails/allen-p/_sent_mail/100.\"], \"van\": [\"enron-emails/allen-p/_sent_mail/100.\"], \"dec\": [\"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"notes\": [\"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"folders\": [\"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"nsf\": [\"enron-emails/allen-p/_sent_mail/100.\", \"enron-emails/allen-p/_sent_mail/1000.\", \"enron-emails/allen-p/_sent_mail/1001.\"], \"successful\": [\"enron-emails/allen-p/_sent_mail/100.\"], \"way\": [\"enron-emails/allen-p/_sent_mail/100.\"], \"1075863688222\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"06\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"randall\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"gay\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"l\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"randy\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"can\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"send\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"me\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"schedule\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"salary\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"level\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"everyone\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"scheduling\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"group\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"plus\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"your\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"thoughts\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"changes\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"that\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"need\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"made\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"patti\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"example\": [\"enron-emails/allen-p/_sent_mail/1000.\"], \"1075863688243\": [\"enron-emails/allen-p/_sent_mail/1001.\"], \"thu\": [\"enron-emails/allen-p/_sent_mail/1001.\"], \"aug\": [\"enron-emails/allen-p/_sent_mail/1001.\"], \"05\": [\"enron-emails/allen-p/_sent_mail/1001.\"], \"07\": [\"enron-emails/allen-p/_sent_mail/1001.\"], \"greg\": [\"enron-emails/allen-p/_sent_mail/1001.\"], \"piper\": [\"enron-emails/allen-p/_sent_mail/1001.\"], \"hello\": [\"enron-emails/allen-p/_sent_mail/1001.\"], \"let\": [\"enron-emails/allen-p/_sent_mail/1001.\"], \"shoot\": [\"enron-emails/allen-p/_sent_mail/1001.\"], \"tuesday\": [\"enron-emails/allen-p/_sent_mail/1001.\"], \"at\": [\"enron-emails/allen-p/_sent_mail/1001.\"]};\n`,\n            autorun: true,\n            header: false,\n        }\n    }\n})()"
    },
    {
      "cell_type": "markdown",
      "source": "<blockquote>\n<p><strong>Further Learning</strong>:</p>\n<ul>\n<li>Try playing with the search functionality above. Try adding or modifying <code>doSearch(query)</code> to try more queries.</li>\n<li>Try understanding how the reverse index works (format the JSON for the index and understand how it works)</li>\n</ul>\n</blockquote>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2>The Elephant in the Room (quite literally) üêò</h2>\n<p>The index in the playground is <em>humongous</em>. And to make matters worse, it was built with just 5 documents! Our na√Øve reverse index does not scale well!</p>\n<p>Attempting to index the entire Enron email dataset resulted in a disastrously big index. The memory usage of Node.js was 2 GB of RAM, quite a costly VPS or pod!</p>\n<p><img src=\"attachment:5d0a70bf-4c59-4593-92a6-9bd934d26446.png\" alt=\"Node.js is using 2 GB of RAM\" /></p>\n<p>Next, I tried dumping the full index, only to get an error that the JSON blob was too big to write. Oh, and yes, that is <mjx-container class=\"MathJax\" jax=\"SVG\" style=\"position: relative;\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.931ex\" height=\"1.946ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 4389.3 860\" aria-hidden=\"true\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(944.7,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2444.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2889.3,0)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(500,0)\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(1000,0)\"></path></g></g></g></svg><mjx-assistive-mml unselectable=\"on\" display=\"inline\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>1</mn><mo>,</mo><mn>080</mn><mo>,</mo><mn>813</mn></math></mjx-assistive-mml></mjx-container> entries in the reverse index!</p>\n<pre><code>debug\n1080813\nfile:///Users/yash/code/microsearch/runner.js:84\n      fs.writeFile('debug.json', JSON.stringify(Object.fromEntries(index.idx), null, 2));\n                                      ^\n\nRangeError: Invalid string length\n    at JSON.stringify (&lt;anonymous&gt;)\n    at file:///Users/yash/code/microsearch/runner.js:84:39\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n\nNode.js v22.13.0\n</code></pre>\n<p>Our goal was to be able to do fullly client-side search on a large dataset. Unfortunately, that is currently sounding like a pipe dream!</p>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Summary üí¨</h2>\n<p>In this article, we learned what a forward index and reverse index are in a search engine. We also used our intuition on how to find a word in a textbook to develop the data structures and algorithms required to create the forward and reverse index.</p>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<h2><a href=\"/blog/search-engine-4\">Next: Workshop - you‚Äôll build your search engine!</a></h2>\n"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.13.1"
    },
    "img": {
      "5d0a70bf-4c59-4593-92a6-9bd934d26446.png": {
        "width": 716,
        "height": 144
      }
    },
    "pageinfo": {
      "root": "deep-dive",
      "name": "search-engines",
      "page": 3,
      "author": "yash101",
      "title": "Search Engines - a Beginner-Friendly Deep Dive",
      "subtitle": "Indexing and searching, a na√Øve approach",
      "lastModifiedOn": "2025-02-07T20:56:17.277Z",
      "publishedOn": "2025-02-07T00:00:00.277Z",
      "isPublished": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5,
  "additionalRawHtml": "\n<style type=\"text/css\">\nmjx-container[jax=\"SVG\"] > svg {\n  display: inline;\n  z-index: 0;\n  max-width: 100%;\n  overflow-x: auto;\n}\n\nmjx-container[jax=\"SVG\"] {\n  direction: ltr;\n}\n\nmjx-container[jax=\"SVG\"] > svg {\n  overflow: visible;\n  min-height: 1px;\n  min-width: 1px;\n}\n\nmjx-container[jax=\"SVG\"] > svg a {\n  fill: blue;\n  stroke: blue;\n}\n\nmjx-assistive-mml {\n  position: absolute !important;\n  top: 0px;\n  left: 0px;\n  clip: rect(1px, 1px, 1px, 1px);\n  padding: 1px 0px 0px 0px !important;\n  border: 0px !important;\n  display: block !important;\n  width: auto !important;\n  overflow: hidden !important;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\nmjx-assistive-mml[display=\"block\"] {\n  width: 100% !important;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"] {\n  display: block;\n  text-align: center;\n  margin: 1em 0;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\n  display: flex;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\n  text-align: left;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\n  text-align: right;\n}\n\ng[data-mml-node=\"merror\"] > g {\n  fill: red;\n  stroke: red;\n}\n\ng[data-mml-node=\"merror\"] > rect[data-background] {\n  fill: yellow;\n  stroke: none;\n}\n\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\n  stroke-dasharray: 140;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\n  stroke-linecap: round;\n  stroke-dasharray: 0,140;\n}\n\ng[data-mml-node=\"mtable\"] > g > svg {\n  overflow: visible;\n}\n\n[jax=\"SVG\"] mjx-tool {\n  display: inline-block;\n  position: relative;\n  width: 0;\n  height: 0;\n}\n\n[jax=\"SVG\"] mjx-tool > mjx-tip {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\nmjx-tool > mjx-tip {\n  display: inline-block;\n  padding: .2em;\n  border: 1px solid #888;\n  font-size: 70%;\n  background-color: #F8F8F8;\n  color: black;\n  box-shadow: 2px 2px 5px #AAAAAA;\n}\n\ng[data-mml-node=\"maction\"][data-toggle] {\n  cursor: pointer;\n}\n\nmjx-status {\n  display: block;\n  position: fixed;\n  left: 1em;\n  bottom: 1em;\n  min-width: 25%;\n  padding: .2em .4em;\n  border: 1px solid #888;\n  font-size: 90%;\n  background-color: #F8F8F8;\n  color: black;\n}\n\nforeignObject[data-mjx-xml] {\n  font-family: initial;\n  line-height: normal;\n  overflow: visible;\n}\n\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\n  stroke-width: 3;\n}\n\n</style>\n    "
}