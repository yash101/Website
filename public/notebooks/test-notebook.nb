{
  "cells": [
    {
      "cell_type": "markdown",
      "source": "<p>hello world</p>\n"
    },
    {
      "cell_type": "markdown",
      "source": "<p><img src=\"attachment:d692c614-622d-437c-a7b2-a748ec0694ec.png\" alt=\"image.png\" /></p>\n<p><img src=\"attachment:21822bff-1cf4-4c46-ac76-8c4ad4b47419.png\" alt=\"image.png\" /></p>\n<p><img src=\"attachment:204df0cc-587a-47d9-986a-64606bcb5ecf.png\" alt=\"image.png\" /></p>\n"
    },
    {
      "cell_type": "code",
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "hello  0",
            "hello  2",
            "hello  4",
            "hello  6",
            "hello  8"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "uh oho 1",
            "uh oho 3",
            "uh oho 5",
            "uh oho 7",
            "uh oho 9"
          ]
        },
        {
          "ename": "NameError",
          "evalue": "name 'hello' is not defined",
          "output_type": "error",
          "traceback": [
            "<span style=\"color:#A00\">---------------------------------------------------------------------------</span>",
            "<span style=\"color:#A00\">NameError</span>                                 Traceback (most recent call last)",
            "Cell <span style=\"color:#0A0\">In[4], line 8</span><br/><b><span style=\"color:#0A0\">      5</span></b>     <blink><b>else<span style=\"color:#FFF\"></span></b></blink>:<br/><b><span style=\"color:#0A0\">      6</span></b>         <span style=\"color:#008700\">print<span style=\"color:#FFF\">(<span style=\"color:#af0000\">&apos;<span style=\"color:#FFF\"><span style=\"color:#af0000\">uh oho<span style=\"color:#FFF\"><span style=\"color:#af0000\">&apos;<span style=\"color:#FFF\">, i, file<span style=\"color:#626262\">=<span style=\"color:#FFF\">sys<span style=\"color:#626262\">.<span style=\"color:#FFF\">stderr)<br/></span></span></span></span></span></span></span></span></span></span></span></span><span style=\"color:#0A0\">----&gt; 8</span> <span style=\"background-color:#A50\">hello<span style=\"background-color:#000\"></span></span>",
            "<span style=\"color:#A00\">NameError</span>: name &apos;hello&apos; is not defined"
          ]
        }
      ],
      "source": "<pre><code class=\"hljs\">import sys\nfor i in range(10):\n    if i % 2 == 0:\n        print('hello ', i)\n    else:\n        print('uh oho', i, file=sys.stderr)\n\nhello</code></pre>"
    },
    {
      "cell_type": "code",
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>90</td>\n",
              "      <td>0.114774</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>59</td>\n",
              "      <td>0.265851</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>91</td>\n",
              "      <td>0.004229</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>62</td>\n",
              "      <td>0.209416</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6</td>\n",
              "      <td>0.880269</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>76</td>\n",
              "      <td>0.138058</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>82</td>\n",
              "      <td>0.184467</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>35</td>\n",
              "      <td>0.442307</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>75</td>\n",
              "      <td>0.551558</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>19</td>\n",
              "      <td>0.145065</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    A         B    C\n",
              "0  90  0.114774  Yes\n",
              "1  59  0.265851   No\n",
              "2  91  0.004229  Yes\n",
              "3  62  0.209416   No\n",
              "4   6  0.880269   No\n",
              "5  76  0.138058  Yes\n",
              "6  82  0.184467   No\n",
              "7  35  0.442307   No\n",
              "8  75  0.551558  Yes\n",
              "9  19  0.145065   No"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": "<pre><code class=\"hljs\">import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Generate random data for a plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(scale=0.1, size=len(x))\n\nplt.figure(figsize=(8, 5))\nplt.plot(x, y, label=&quot;Noisy Sine Wave&quot;, color=&quot;blue&quot;, linewidth=2)\nplt.xlabel(&quot;X Axis&quot;)\nplt.ylabel(&quot;Y Axis&quot;)\nplt.title(&quot;Sample Matplotlib Plot&quot;)\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# Generate a sample DataFrame\ndata = {\n    &quot;A&quot;: np.random.randint(0, 100, 10),\n    &quot;B&quot;: np.random.rand(10),\n    &quot;C&quot;: np.random.choice([&quot;Yes&quot;, &quot;No&quot;], 10),\n}\ndf = pd.DataFrame(data)\n\n# Display DataFrame\ndf</code></pre>"
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": "<pre><code class=\"hljs\"></code></pre>"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.13.1"
    },
    "img": {
      "204df0cc-587a-47d9-986a-64606bcb5ecf.png": {
        "width": 988,
        "height": 415
      },
      "21822bff-1cf4-4c46-ac76-8c4ad4b47419.png": {
        "width": 851,
        "height": 570
      },
      "d692c614-622d-437c-a7b2-a748ec0694ec.png": {
        "width": 819,
        "height": 526
      }
    },
    "pageinfo": {
      "root": "blog",
      "name": "test-notebook",
      "page": 1,
      "title": "short title",
      "subtitle": "some more details, in title format",
      "isPublished": true,
      "publishedOn": "2025-02-09T20:56:17.277Z",
      "lastModifiedOn": "2025-02-09T20:56:17.277Z"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5,
  "additionalRawHtml": "\n<style type=\"text/css\">\nmjx-container[jax=\"SVG\"] > svg {\n  display: inline;\n  z-index: 0;\n  max-width: 100%;\n  overflow-x: auto;\n}\n\nmjx-container[jax=\"SVG\"] {\n  direction: ltr;\n}\n\nmjx-container[jax=\"SVG\"] > svg {\n  overflow: visible;\n  min-height: 1px;\n  min-width: 1px;\n}\n\nmjx-container[jax=\"SVG\"] > svg a {\n  fill: blue;\n  stroke: blue;\n}\n\nmjx-assistive-mml {\n  position: absolute !important;\n  top: 0px;\n  left: 0px;\n  clip: rect(1px, 1px, 1px, 1px);\n  padding: 1px 0px 0px 0px !important;\n  border: 0px !important;\n  display: block !important;\n  width: auto !important;\n  overflow: hidden !important;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\nmjx-assistive-mml[display=\"block\"] {\n  width: 100% !important;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"] {\n  display: block;\n  text-align: center;\n  margin: 1em 0;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\n  display: flex;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\n  text-align: left;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\n  text-align: right;\n}\n\ng[data-mml-node=\"merror\"] > g {\n  fill: red;\n  stroke: red;\n}\n\ng[data-mml-node=\"merror\"] > rect[data-background] {\n  fill: yellow;\n  stroke: none;\n}\n\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\n  stroke-dasharray: 140;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\n  stroke-linecap: round;\n  stroke-dasharray: 0,140;\n}\n\ng[data-mml-node=\"mtable\"] > g > svg {\n  overflow: visible;\n}\n\n[jax=\"SVG\"] mjx-tool {\n  display: inline-block;\n  position: relative;\n  width: 0;\n  height: 0;\n}\n\n[jax=\"SVG\"] mjx-tool > mjx-tip {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\nmjx-tool > mjx-tip {\n  display: inline-block;\n  padding: .2em;\n  border: 1px solid #888;\n  font-size: 70%;\n  background-color: #F8F8F8;\n  color: black;\n  box-shadow: 2px 2px 5px #AAAAAA;\n}\n\ng[data-mml-node=\"maction\"][data-toggle] {\n  cursor: pointer;\n}\n\nmjx-status {\n  display: block;\n  position: fixed;\n  left: 1em;\n  bottom: 1em;\n  min-width: 25%;\n  padding: .2em .4em;\n  border: 1px solid #888;\n  font-size: 90%;\n  background-color: #F8F8F8;\n  color: black;\n}\n\nforeignObject[data-mjx-xml] {\n  font-family: initial;\n  line-height: normal;\n  overflow: visible;\n}\n\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\n  stroke-width: 3;\n}\n\n</style>\n    "
}